import asyncio
import json
import logging
import pytz
from datetime import datetime, time
from pathlib import Path
from typing import Dict, List, Tuple, Optional

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class HolidayNotifierBot:
    def __init__(self):
        self.bot_token = "7380715390:AAHZuseuGWA9pxE6QayeBxFoM51IXdAh02s"
        self.timezone = pytz.timezone('Asia/Novokuznetsk')
        self.notification_settings = self._load_notification_settings()
        self.holidays = self._load_holidays()
        self.chat_id = None
        self.last_notification_date = None
        self.job = None

    def _load_notification_settings(self) -> Dict:
        settings_path = Path("notification_settings.json")
        try:
            with settings_path.open('r') as f:
                settings = json.load(f)
                if not all(key in settings for key in ["enabled", "hour", "minute"]):
                    raise ValueError("–ù–µ–ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return settings
        except (FileNotFoundError, json.JSONDecodeError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return {"enabled": True, "hour": 9, "minute": 15}

    def _save_notification_settings(self) -> None:
        with open("notification_settings.json", 'w') as f:
            json.dump(self.notification_settings, f, indent=4)

    def _load_holidays(self) -> Dict[Tuple[int, int], List[Dict]]:
        try:
            with open("holidays.json", "r", encoding="utf-8") as f:
                holidays_json = json.load(f)
                holidays = {}
                for date, events in holidays_json.items():
                    try:
                        month, day = map(int, date.split("-"))
                        holidays[(month, day)] = events if isinstance(events, list) else [events]
                    except (ValueError, AttributeError):
                        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: {date}")
                return holidays
        except (FileNotFoundError, json.JSONDecodeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {e}")
            return {}

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        self.chat_id = update.effective_chat.id
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö.\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {self.notification_settings['hour']:02d}:{self.notification_settings['minute']:02d}\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /settime HH:MM –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /test –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."
        )
        logger.info(f"–ß–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {self.chat_id}")
        await self._restart_job(context.application)

    async def settime(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        try:
            time_str = context.args[0]
            hour, minute = map(int, time_str.split(":"))
            if not (0 <= hour <= 23 and 0 <= minute <= 59):
                raise ValueError

            self.notification_settings.update({
                "hour": hour,
                "minute": minute
            })
            self._save_notification_settings()

            await self._restart_job(context.application)
            await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {hour:02d}:{minute:02d}")
            logger.info(f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {hour:02d}:{minute:02d}")
        except (IndexError, ValueError):
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /settime HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, /settime 09:15)")

    async def test_notification(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if not self.chat_id:
            await update.message.reply_text("‚ö† –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return

        if message := self._get_holidays_message():
            try:
                await context.bot.send_message(
                    chat_id=self.chat_id,
                    text=f"üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n{message}"
                )
                await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞: {e}")
        else:
            await update.message.reply_text("‚Ñπ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        status_msg = (
            f"üìÖ –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"–ß–∞—Ç ID: {self.chat_id or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {self.notification_settings['hour']:02d}:{self.notification_settings['minute']:02d}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {self.last_notification_date or '–µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å'}\n"
            f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {'–∞–∫—Ç–∏–≤–Ω–æ' if self.job else '–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ'}"
        )
        await update.message.reply_text(status_msg)

    def _get_holidays_message(self) -> Optional[str]:
        now = datetime.now(self.timezone)
        today = (now.month, now.day)

        if today in self.holidays:
            events = self.holidays[today]
            return "üéâ –°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫:\n" + "\n".join(
                event.get('text', str(event)) if isinstance(event, dict) else str(event)
                for event in events
            )
        return None

    async def _send_notification(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        if not self.notification_settings["enabled"] or not self.chat_id:
            return

        now = datetime.now(self.timezone).date()
        if now == self.last_notification_date:
            return

        if message := self._get_holidays_message():
            try:
                await context.bot.send_message(
                    chat_id=self.chat_id,
                    text=message
                )
                self.last_notification_date = now
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {datetime.now(self.timezone)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    async def _restart_job(self, application) -> None:
        if self.job:
            self.job.schedule_removal()

        self.job = application.job_queue.run_daily(
            self._send_notification,
            time=time(
                hour=self.notification_settings["hour"],
                minute=self.notification_settings["minute"],
                tzinfo=self.timezone
            ),
            days=tuple(range(7)),
            name="daily_holiday_notification"
        )
        logger.info(
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {self.notification_settings['hour']:02d}:{self.notification_settings['minute']:02d}")

    def run(self) -> None:
            application = Application.builder().token(self.bot_token).build()
            application.add_handler(CommandHandler("start", self.start))
            application.add_handler(CommandHandler("settime", self.settime))
            application.add_handler(CommandHandler("test", self.test_notification))
            application.add_handler(CommandHandler("status", self.status))

            application.job_queue.run_once(
                lambda ctx: asyncio.create_task(self._restart_job(ctx.application)),
                when=0
            )

            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            application.run_polling()

if __name__ == '__main__':
        try:
            bot = HolidayNotifierBot()
            bot.run()
        except Exception as e:
            logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
